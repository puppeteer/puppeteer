name: CI

# Declare default permissions as read only.
permissions: read-all

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  inspect-code:
    name: Inspect code
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 2
      - name: Set up Node.js
        uses: actions/setup-node@v3.4.1
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm ci --ignore-scripts
      - name: Check code
        run: npm run check
      - name: Lint code
        run: npm run lint
      - name: Lint commits
        run: npm run commitlint
        if: github.event_name != 'pull_request'

  check-docs:
    name: Check documentation
    runs-on: ubuntu-latest
    outputs:
      needs_deploying: ${{ steps.needs_deploying.outputs.value }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 2
      - name: Set up Node.js
        uses: actions/setup-node@v3.4.1
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm ci --ignore-scripts
      - name: Build
        run: npm run docs
      - name: Check if autogenerated docs differ
        run: |
          diff_file=$(mktemp doc_diff_XXXXXX)
          git diff --color > $diff_file
          if [[ -s $diff_file ]]; then
            echo "Please update the documentation by running 'npm run docs'. The following was the diff"
            cat $diff_file
            rm $diff_file
            exit 1
          fi
          rm $diff_file
      - name: Check if docs need to be deployed
        id: needs_deploying
        run: |
          if [[ $(git diff HEAD^ -- ./docs ./website) ]]; then
            needs_deploying=true
          else
            needs_deploying=false
          fi
          echo "::set-output name=value::$needs_deploying"

  deploy-docs:
    needs: check-docs
    name: Deploy docs (if needed)
    if: ${{ needs.check-docs.outputs.needs_deploying == 'true' && github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v3.0.2
      - name: Set up Node.js
        uses: actions/setup-node@v3.4.1
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        working-directory: ./website
        run: npm ci
      - name: Build website
        working-directory: ./website
        env:
          NODE_OPTIONS: --max-old-space-size=6144
        run: npm run build
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./website/build
          user_name: release-please[bot]
          user_email: 55107282+release-please[bot]@users.noreply.github.com

  chrome-tests:
    name: ${{ matrix.suite }} tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        suite:
          - chrome-headless
          - chrome-headful
          - chrome-new-headless
    steps:
      - name: Check out repository
        uses: actions/checkout@v3.0.2
      - name: Set up Node.js
        uses: actions/setup-node@v3.4.1
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm ci --ignore-scripts
      - name: Build packages
        run: npm run build
      - name: Setup cache for Chromium binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/puppeteer/chrome
          key: ${{ runner.os }}-chromium-${{ hashFiles('packages/puppeteer-core/src/revisions.ts') }}
      - name: Install Chromium
        run: npm run postinstall
      - name: Install linux dependencies.
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get install xvfb
      - name: Tests types
        run: npm run test-types
      - name: Run all tests (for non-Linux)
        if: ${{ matrix.os != 'ubuntu-latest' }}
        run: npm run test -- --test-suite ${{ matrix.suite }}
      - name: Run all tests (for Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: xvfb-run --auto-servernum npm run test -- --test-suite ${{ matrix.suite }}

  firefox-tests:
    name: ${{ matrix.suite }} tests on ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        suite:
          - firefox-bidi
          - firefox-headful
          - firefox-headless
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3.4.1
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm ci --ignore-scripts
      - name: Build packages
        run: npm run build
      - name: Setup cache for Firefox binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/puppeteer/firefox
          key: ${{ runner.os }}-firefox-${{ hashFiles('packages/puppeteer-core/src/revisions.ts') }}
      - name: Install Firefox
        env:
          PUPPETEER_PRODUCT: firefox
        run: npm run postinstall
      - name: Install linux dependencies.
        run: sudo apt-get install xvfb
      - name: Tests types
        run: npm run test-types
      - name: Run all tests
        run: xvfb-run --auto-servernum npm run test -- --test-suite ${{ matrix.suite }}

  installation-test-build:
    name: Build installation test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3.4.1
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm ci --ignore-scripts
      - name: Build installation test
        run: npm run build --workspace @puppeteer-test/installation
      - name: Pack installation test
        run: npm pack --workspace @puppeteer-test/installation
      - name: Upload installation test
        uses: actions/upload-artifact@v3
        with:
          name: installation-test
          path: puppeteer-test-installation-latest.tgz

  installation-test:
    name: Test ${{ matrix.pkg_manager }} installation on ${{ matrix.os }} (${{ matrix.node }})
    needs: installation-test-build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        node:
          - 14
          - 16
          - 18
        pkg_manager:
          - npm
          - yarn
    steps:
      - name: Download installation test
        uses: actions/download-artifact@v3
        with:
          name: installation-test
      - name: Unpack installation test
        run: tar -xf puppeteer-test-installation-latest.tgz --strip-components 1 -C .
      - name: Set up Node.js
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ matrix.node }}
      - name: Set up ${{ matrix.pkg_manager }}
        run: npm install -g ${{ matrix.pkg_manager }}@latest
      - name: Install dependencies
        run: ${{ matrix.pkg_manager }} install
      - name: Test
        env:
          PKG_MANAGER: ${{ matrix.pkg_manager }}
        run: ${{ matrix.pkg_manager }} test

  docker-tests:
    name: Test Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 2
      - name: Set up Node.js
        uses: actions/setup-node@v3.4.1
        with:
          cache: npm
          node-version: ${{ matrix.node }}
      - name: Install dependencies
        run: npm ci --ignore-scripts
      - name: Build packages
        run: npm run build
      - name: Pack packages
        run: docker/pack.sh
      - name: Build docker image
        working-directory: ./docker
        run: |
          docker build -t puppeteer-test-image .
      - name: Run smoke test
        working-directory: ./docker
        run: |
          docker run -i --init --cap-add=SYS_ADMIN --rm puppeteer-test-image node -e "`cat test/smoke-test.js`"
