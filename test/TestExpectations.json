[
  {
    "testIdPattern": "*",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["SKIP", "TIMEOUT"]
  },
  {
    "testIdPattern": "[autofill.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[autofill.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[bfcache.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[chromiumonly.spec] Chromium-Specific Launcher tests *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[click.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[dialog.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[drag-and-drop.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[drag-and-drop.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[drag-and-drop.spec] Legacy Drag n' Drop *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[elementhandle.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[evaluation.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluateOnNewDocument *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.removeScriptToEvaluateOnNewDocument *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[fixtures.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[function.spec] Function interpolateFunction should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": [],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[function.spec] Function interpolateFunction should work inlined",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": [],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[injected.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[jshandle.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[locator.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[navigation.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Frame.goto *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Frame.waitForNavigation *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goBack *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Page.authenticate *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL", "TIMEOUT"]
  },
  {
    "testIdPattern": "[network.spec] network Page.setBypassServiceWorker *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Page.setBypassServiceWorker *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["FAIL", "TIMEOUT"]
  },
  {
    "testIdPattern": "[network.spec] network Page.setExtraHTTPHeaders *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Request.isNavigationRequest *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Response.buffer *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL", "TIMEOUT"]
  },
  {
    "testIdPattern": "[network.spec] network Response.json *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Response.text *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL", "TIMEOUT"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.addScriptTag *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.addStyleTag *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.browser *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.browserContext *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.DOMContentLoaded *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Load *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.PageError *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.pdf *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setContent *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.waitForNetworkIdle *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.waitForRequest *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.waitForResponse *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page removing and adding event handlers *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[prerender.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[queryhandler.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[queryselector.spec] querySelector *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[stacktrace.spec] Stack trace *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[waittask.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[accessibility.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP", "TIMEOUT"]
  },
  {
    "testIdPattern": "[accessibility.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[ariaqueryhandler.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[ariaqueryhandler.spec] AriaQueryHandler waitForSelector (aria) should have an error message specifically for awaiting an element to be hidden",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[ariaqueryhandler.spec] AriaQueryHandler waitForSelector (aria) should have correct stack trace for timeout",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[ariaqueryhandler.spec] AriaQueryHandler waitForSelector (aria) should respect timeout",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[autofill.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "headless"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[browser.spec] Browser specs Browser.isConnected should set the browser connected state",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browser.spec] Browser specs Browser.process should not return child_process for remote browser",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browser.spec] Browser specs Browser.process should return child_process instance",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browser.spec] Browser specs Browser.target should return browser target",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should close all belonging targets once closing context",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should create new incognito context",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should have default context",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should timeout waiting for a non-existent target",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should wait for a target",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext window.open should use parent tab context",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[CDPSession.spec] Target.createCDPSession *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[CDPSession.spec] Target.createCDPSession should not report created targets for custom CDP sessions",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[chromiumonly.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[chromiumonly.spec] Chromium-Specific Launcher tests Puppeteer.launch |pipe| option *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should click the button with fixed position inside an iframe",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[Connection.spec] WebDriver BiDi Connection should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[coverage.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[coverage.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[coverage.spec] Coverage specs JSCoverage should ignore pptr internal scripts if reportAnonymousScripts is true",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[drag-and-drop.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.boundingBox should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.click should return Point data",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.clickablePoint should not work if the click box is not visible due to the iframe",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["TIMEOUT"]
  },
  {
    "testIdPattern": "[emulation.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.viewport should get the proper viewport size",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.viewport should support mobile emulation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluate should throw if elementHandles are from other frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluate should work from-inside an exposed function",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluateOnNewDocument *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluateOnNewDocument should evaluate before anything else on the page",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluateOnNewDocument should work with CSP",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.removeScriptToEvaluateOnNewDocument *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[fixtures.spec] Fixtures dumpio option should work with pipe option",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should handle nested frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should report frame.name()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should support lazy frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[headful.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[idle_override.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[input.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[jshandle.spec] JSHandle JSHandle.jsonValue should not throw for circular objects",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[jshandle.spec] JSHandle JSHandle.jsonValue should work with dates",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[jshandle.spec] JSHandle Page.evaluateHandle should return the RemoteObject",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[jshandle.spec] JSHandle Page.evaluateHandle should use the same JS wrappers",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard ElementHandle.press should not support |text| option",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should move with the arrow keys",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should not type canceled events",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should press the meta key",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should press the metaKey",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should send a character with ElementHandle.press",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should send proper codes while typing",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should send proper codes while typing with shift",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should specify location",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should specify repeat property",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should throw on unknown keys",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should trigger commands of keyboard shortcuts",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should type all kinds of characters",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should type emoji",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should type emoji into an iframe",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should type into a textarea",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Browser.disconnect should reject navigation when browser closes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Browser.disconnect should reject waitForSelector when browser closes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.executablePath returns executablePath for channel",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.executablePath should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.executablePath when executable path is configured its value is used",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch can launch and close the browser",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should be able to launch Chrome",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should be able to launch Firefox",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should be able to launch Firefox",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should have custom URL when launching browser",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should launch Chrome properly with --no-startup-window and waitForInitialPage=false",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should take fullPage screenshots when defaultViewport is null",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should work with no default arguments",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should work with no default arguments",
    "platforms": ["linux"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch tmp profile should be cleaned up",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch userDataDir argument with non-existent dir",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should click the document",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should not throw if clicking in parallel",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should resize the textarea",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should select the text with mouse",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should send mouse wheel events",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should set modifier keys on click",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should trigger hover state",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should trigger hover state with removed window.Node",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should work with mobile viewports and cross process navigations",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation \"after each\" hook for \"should work with both domcontentloaded and load\"",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation \"after each\" hook in \"navigation\"",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation \"after each\" hook in \"navigation\"",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Frame.goto should reject when frame detaches",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should fail when navigating to bad SSL",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should navigate to empty page with networkidle0",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should navigate to empty page with networkidle2",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should navigate to page with iframe and networkidle0",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should send referer",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should wait for network idle to succeed navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events Page.Events.RequestFinished",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events should fire events in proper order",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[network.spec] network raw network headers Cross-origin set-cookie",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Request.headers should define Chrome as user agent header",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network Request.headers should define Firefox as user agent header",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network Request.initiator should return the initiator",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Request.isNavigationRequest should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Request.isNavigationRequest should work when navigating to image",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Request.postData should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Response.fromServiceWorker Response.fromServiceWorker",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Response.timing returns timing information",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[oopif.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF-debug OOPIF should support lazy OOP frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page BrowserContext.overridePermissions should be prompt by default",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.addScriptTag should throw when added with content to the CSP page",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.addStyleTag should throw when added with content to the CSP page",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.client should return the client instance",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.close should *not* run beforeunload by default",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.close should reject all promises when page is closed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.close should set the page close state",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.close should set the page close state",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.close should terminate network waiters",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.close should terminate network waiters",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Close should work with page.close",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should not fail for window object",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should work for different console API calls with timing functions",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should work on script call right after navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.pdf should respect timeout",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should deselect all options when passed no values for a multiple select",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should deselect all options when passed no values for a select without multiple",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should respect event bubbling",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should return [] on no matched values",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should return [] on no values",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should return an array of matched values",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should return an array of one element when multiple is not set",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should select multiple options",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should select only first option",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should select single option",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should throw if passed in non-strings",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should throw when element is not a <select>",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should work when re-defining top-level Event class",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setGeolocation should throw when invalid longitude",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.title should return the page title",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.url should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.waitForNetworkIdle should work with aborted requests",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL", "PASS", "TIMEOUT"]
  },
  {
    "testIdPattern": "[proxy.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[proxy.spec] request proxy in incognito browser context should respect proxy bypass list when configured at browser level",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[proxy.spec] request proxy in incognito browser context should respect proxy bypass list when configured at context level",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[proxy.spec] request proxy should respect proxy bypass list",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[queryhandler.spec] Query handler tests P selectors should work ARIA selectors",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[queryhandler.spec] Query handler tests P selectors should work ARIA selectors with name and role",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[queryhandler.spec] Query handler tests P selectors should work ARIA selectors with role",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[queryhandler.spec] Query handler tests P selectors should work for ARIA selectors in multiple isolated worlds",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL", "TIMEOUT"]
  },
  {
    "testIdPattern": "[queryhandler.spec] Query handler tests P selectors should work with :hover",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[queryhandler.spec] Query handler tests Text selectors in Page should clear caches",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[requestinterception-experimental.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "SKIP"]
  },
  {
    "testIdPattern": "[requestinterception.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "SKIP"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[stacktrace.spec] Stack trace *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[target.spec] Target Browser.pages should return all of the pages",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target Browser.targets should return all of the targets",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target Browser.waitForTarget should timeout waiting for a non-existent target",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target should be able to use async waitForTarget",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target should be able to use the default page in the browser",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target should contain browser target",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target should not crash while redirecting if original request was missed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[TargetManager.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "SKIP"]
  },
  {
    "testIdPattern": "[tracing.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[tracing.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[worker.spec] *",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[accessibility.spec] Accessibility filtering children of leaf nodes rich text editable fields should have children",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[accessibility.spec] Accessibility get snapshots while the tree is re-calculated",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL", "TIMEOUT"]
  },
  {
    "testIdPattern": "[ariaqueryhandler.spec] AriaQueryHandler waitForSelector (aria) should throw when frame is detached",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browser.spec] Browser specs Browser.isConnected should set the browser connected state",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[browser.spec] Browser specs Browser.process should not return child_process for remote browser",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[browser.spec] Browser specs Browser.target should return browser target",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browser.spec] Browser specs Browser.version should return version",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should close all belonging targets once closing context",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should create new incognito context",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should fire target events",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should provide a context id",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should timeout waiting for a non-existent target",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should wait for a target",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should wait for a target",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext should work across sessions",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[browsercontext.spec] BrowserContext window.open should use parent tab context",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[CDPSession.spec] Target.createCDPSession should be able to detach session",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[CDPSession.spec] Target.createCDPSession should be able to detach session",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[CDPSession.spec] Target.createCDPSession should enable and disable domains independently",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[CDPSession.spec] Target.createCDPSession should enable and disable domains independently",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[CDPSession.spec] Target.createCDPSession should send events",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[CDPSession.spec] Target.createCDPSession should send events",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[CDPSession.spec] Target.createCDPSession should throw nice errors",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[CDPSession.spec] Target.createCDPSession should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[chromiumonly.spec] Chromium-Specific Launcher tests Puppeteer.launch |browserURL| option should be able to connect using browserUrl, with and without trailing slash",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should click on checkbox input and toggle",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should click on checkbox label and toggle",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should click the button after navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should click the button if window.Node is removed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should click the button inside an iframe",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should click the button with deviceScaleFactor set",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should click the button with fixed position inside an iframe",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should click the button with fixed position inside an iframe",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should click with disabled javascript",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should click with disabled javascript",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should double click the button",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should scroll and click with disabled javascript",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should scroll and click with disabled javascript",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should select the text by triple clicking",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[click.spec] Page.click should select the text by triple clicking",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[cookies.spec] Cookie specs Page.cookies should get cookies from multiple urls",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[cookies.spec] Cookie specs Page.deleteCookie should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[cookies.spec] Cookie specs Page.setCookie should default to setting secure cookie for HTTPS websites",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[cookies.spec] Cookie specs Page.setCookie should isolate cookies in browser contexts",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[cookies.spec] Cookie specs Page.setCookie should set a cookie on a different domain",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[cookies.spec] Cookie specs Page.setCookie should set a cookie with a path",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[cookies.spec] Cookie specs Page.setCookie should set cookie with reasonable defaults",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[cookies.spec] Cookie specs Page.setCookie should set cookies from a frame",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[cookies.spec] Cookie specs Page.setCookie should set multiple cookies",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[cookies.spec] Cookie specs Page.setCookie should set secure same-site cookies from a frame",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[cookies.spec] Cookie specs Page.setCookie should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[coverage.spec] Coverage specs CSSCoverage should work with complicated usecases",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[coverage.spec] Coverage specs JSCoverage should not ignore eval() scripts if reportAnonymousScripts is true",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[defaultbrowsercontext.spec] DefaultBrowserContext page.cookies() should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[defaultbrowsercontext.spec] DefaultBrowserContext page.deleteCookie() should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[defaultbrowsercontext.spec] DefaultBrowserContext page.setCookie() should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[dialog.spec] Page.Events.Dialog should allow accepting prompts",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[dialog.spec] Page.Events.Dialog should allow accepting prompts",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[drag-and-drop.spec] Drag n' Drop should drag and drop",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.boundingBox should handle nested frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.boundingBox should handle nested frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.boxModel should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.click should return Point data",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.click should return Point data",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.clickablePoint should work for iframes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.clickablePoint should work for iframes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.contentFrame should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.isIntersectingViewport should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[elementhandle.spec] ElementHandle specs ElementHandle.isIntersectingViewport should work with svg elements",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulate should support clicking",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulate should support clicking",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulate should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulateCPUThrottling should change the CPU throttling rate successfully",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulateMediaFeatures should throw in case of bad argument",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulateMediaFeatures should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulateMediaType should throw in case of bad argument",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulateMediaType should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulateNetworkConditions should change navigator.connection.effectiveType",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulateNetworkConditions should change navigator.connection.effectiveType",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulateTimezone should throw for invalid timezone IDs",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulateTimezone should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulateVisionDeficiency should throw for invalid vision deficiencies",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.emulateVisionDeficiency should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.viewport should detect touch when applying viewport with touches",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.viewport should get the proper viewport size",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.viewport should support landscape emulation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[emulation.spec] Emulation Page.viewport should support touch emulation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs \"after each\" hook for \"should transfer 100Mb of data from page to node.js\"",
    "platforms": ["darwin"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["PASS", "TIMEOUT"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Frame.evaluate should have different execution contexts",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Frame.evaluate should have different execution contexts",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluate should await promise",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluate should simulate a user gesture",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluate should simulate a user gesture",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluate should simulate a user gesture",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluate should throw when evaluation triggers reload",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluate should work from-inside an exposed function",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "TIMEOUT"]
  },
  {
    "testIdPattern": "[evaluation.spec] Evaluation specs Page.evaluate should work from-inside an exposed function",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[fixtures.spec] Fixtures should close the browser when the node process closes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "TIMEOUT"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should detach child frames on navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should report different frame instance when frame re-attaches",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should report different frame instance when frame re-attaches",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should report frame from-inside shadow DOM",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should report frame.name()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should report frame.parent()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should report frame.parent()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should send events when frames are manipulated dynamically",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should send events when frames are manipulated dynamically",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should support framesets",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should support lazy frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame Management should support lazy frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame.evaluate should throw for detached frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame.evaluate should throw for detached frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[frame.spec] Frame specs Frame.executionContext should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[headful.spec] headful tests HEADFUL headless should be able to read cookies written by headful",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["headful", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[headful.spec] headful tests HEADFUL should close browser with beforeunload page",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["headful", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[headful.spec] headful tests HEADFUL should have default url when launching browser",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["headful", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[headful.spec] headful tests HEADFUL target.page() should return a background_page",
    "platforms": ["darwin", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[headful.spec] headful tests HEADFUL target.page() should return a DevTools page if custom isPageTarget is provided",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[headful.spec] headful tests Page.bringToFront should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[ignorehttpserrors.spec] ignoreHTTPSErrors Response.securityDetails Network redirects should report SecurityDetails",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[ignorehttpserrors.spec] ignoreHTTPSErrors Response.securityDetails should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[ignorehttpserrors.spec] ignoreHTTPSErrors should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[ignorehttpserrors.spec] ignoreHTTPSErrors should work with mixed content",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[ignorehttpserrors.spec] ignoreHTTPSErrors should work with request interception",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[jshandle.spec] JSHandle JSHandle.toString should work with different subtypes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard ElementHandle.press should not support |text| option",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard ElementHandle.press should support |text| option",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should press the meta key",
    "platforms": ["linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should press the meta key",
    "platforms": ["linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should press the meta key",
    "platforms": ["darwin"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should press the metaKey",
    "platforms": ["linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should press the metaKey",
    "platforms": ["linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should press the metaKey",
    "platforms": ["darwin"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should report multiple modifiers",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should report shiftKey",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should report shiftKey",
    "platforms": ["darwin"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should report shiftKey",
    "platforms": ["linux"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should send a character with sendCharacter",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should specify location",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should specify repeat property",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should type all kinds of characters",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should type all kinds of characters",
    "platforms": ["linux"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should type emoji",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should type emoji into an iframe",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[keyboard.spec] Keyboard should type emoji into an iframe",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Browser target events should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Browser.Events.disconnected should be emitted when: browser gets closed, disconnected or underlying websocket gets closed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.connect should be able to close remote browser",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.connect should be able to connect multiple times to the same browser",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.connect should be able to connect to a browser with no page targets",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.connect should be able to connect to a browser with no page targets",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.connect should be able to connect to the same page simultaneously",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.connect should be able to connect to the same page simultaneously",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.connect should be able to reconnect to a disconnected browser",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.connect should support ignoreHTTPSErrors option",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.connect should support targetFilter option",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.connect should support targetFilter option",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.executablePath returns executablePath for channel",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.executablePath should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should be able to launch Chrome",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should be able to launch Firefox",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "headless"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should filter out ignored default argument in Firefox",
    "platforms": ["linux"],
    "parameters": ["firefox", "headful"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should filter out ignored default arguments in Chrome",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should have custom URL when launching browser",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch should work with no default arguments",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "headless"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch tmp profile should be cleaned up",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch tmp profile should be cleaned up",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch userDataDir option should restore cookies",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[launcher.spec] Launcher specs Puppeteer Puppeteer.launch userDataDir option should restore state",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[locator.spec] Locator Locator.click should work with a OOPIF",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[locator.spec] Locator Locator.click should work with a OOPIF",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "TIMEOUT"]
  },
  {
    "testIdPattern": "[locator.spec] Locator Locator.race races multiple locators",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should reset properly",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should resize the textarea",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should select the text with mouse",
    "platforms": ["win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should select the text with mouse",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should send mouse wheel events",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should send mouse wheel events",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should set modifier keys on click",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should trigger hover state",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should trigger hover state with removed window.Node",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should tween mouse movement",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[mouse.spec] Mouse should work with mobile viewports and cross process navigations",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Frame.goto should navigate subframes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Frame.goto should navigate subframes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Frame.goto should reject when frame detaches",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Frame.goto should return matching responses",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Frame.waitForNavigation should fail when frame detaches",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Frame.waitForNavigation should fail when frame detaches",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["TIMEOUT"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Frame.waitForNavigation should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Frame.waitForNavigation should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["TIMEOUT"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goBack should work with HistoryAPI",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should fail when main resources failed to load",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should fail when server returns 204",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should navigate to dataURL and fire dataURL requests",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should navigate to dataURL and fire dataURL requests",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should navigate to dataURL and fire dataURL requests",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should navigate to empty page with domcontentloaded",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should navigate to empty page with networkidle0",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should navigate to empty page with networkidle2",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should navigate to page with iframe and networkidle0",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["TIMEOUT"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should navigate to URL with hash and fire requests without hash",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should navigate to URL with hash and fire requests without hash",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should not leak listeners during navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS", "TIMEOUT"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should not leak listeners during navigation of 11 pages",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should return last response in redirect chain",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should return response when page changes its URL after load",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should send referer",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should wait for network idle to succeed navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should work when navigating to data url",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should work when navigating to data url",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should work when page calls history API in beforeunload",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should work with anchor navigation",
    "platforms": ["linux"],
    "parameters": ["chrome", "headless"],
    "expectations": ["PASS", "TIMEOUT"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should work with anchor navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "headless"],
    "expectations": ["PASS", "TIMEOUT"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.goto should work with subframes return 204",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["TIMEOUT"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation should work when subframe issues window.stop()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation should work when subframe issues window.stop()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation should work when subframe issues window.stop()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation should work with both domcontentloaded and load",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["TIMEOUT"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation should work with clicking on anchor links",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation should work with DOM history.back()/history.forward()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation should work with DOM history.back()/history.forward()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation should work with history.pushState()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation should work with history.pushState()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation should work with history.replaceState()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation Page.waitForNavigation should work with history.replaceState()",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network \"after all\" hook in \"network\"",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network \"after each\" hook for \"should wait until response completes\"",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events Page.Events.Request",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events Page.Events.Request",
    "platforms": ["win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events Page.Events.RequestFailed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events Page.Events.RequestFinished",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events Page.Events.RequestServedFromCache",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events Page.Events.RequestServedFromCache",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events Page.Events.Response",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events should fire events in proper order",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events should fire events in proper order",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events should support redirects",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events should support redirects",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events should support redirects",
    "platforms": ["win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Page.authenticate should allow disable authentication",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Page.authenticate should fail if wrong credentials",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Page.authenticate should not disable caching",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Page.authenticate should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network Page.Events.Request should fire for iframes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Page.Events.Request should fire for iframes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Page.setExtraHTTPHeaders should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network raw network headers Same-origin set-cookie navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network raw network headers Same-origin set-cookie navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[network.spec] network raw network headers Same-origin set-cookie subresource",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network raw network headers Same-origin set-cookie subresource",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[network.spec] network raw network headers Same-origin set-cookie subresource",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network raw network headers Same-origin set-cookie subresource",
    "platforms": ["win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Request.frame should work for subframe navigation request",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Request.frame should work for subframe navigation request",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Request.headers should define Firefox as user agent header",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Request.initiator should return the initiator",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Request.isNavigationRequest should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Request.isNavigationRequest should work with request interception",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Request.postData should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Response.buffer should throw if the response does not have a body",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network Response.buffer should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network Response.buffer should work with compression",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network Response.fromCache should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Response.fromCache should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Response.fromServiceWorker Response.fromServiceWorker",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network Response.headers should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Response.json should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network Response.text should return uncompressed text",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network Response.text should throw when requesting body of redirected response",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network Response.text should wait until response completes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network Response.text should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[network.spec] network Response.timing returns timing information",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF clickablePoint, boundingBox, boxModel should work for elements inside OOPIFs",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF should provide access to elements",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF should support evaluating in oop iframes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF should support frames within OOP frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF should support frames within OOP iframes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF should track navigations within OOP iframes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF should treat OOP iframes and normal iframes the same",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF-debug OOPIF clickablePoint, boundingBox, boxModel should work for elements inside OOPIFs",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF-debug OOPIF should provide access to elements",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF-debug OOPIF should support evaluating in oop iframes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF-debug OOPIF should support frames within OOP frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF-debug OOPIF should support frames within OOP iframes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF-debug OOPIF should support wait for navigation for transitions from local to OOPIF",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["PASS", "TIMEOUT"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF-debug OOPIF should track navigations within OOP iframes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF-debug OOPIF should treat OOP iframes and normal iframes the same",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF-debug OOPIF waitForFrame should resolve immediately if the frame already exists",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page \"after all\" hook in \"Page\"",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page \"before each\" hook for \"should include sourcemap when path is provided\"",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page \"before each\" hook for \"should return the page title\"",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page \"before each\" hook for \"should throw an error if loading from url fail\"",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page BrowserContext.overridePermissions should deny permission when not listed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page BrowserContext.overridePermissions should grant permission when listed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page BrowserContext.overridePermissions should grant persistent-storage",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page BrowserContext.overridePermissions should isolate permissions between browser contexts",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page BrowserContext.overridePermissions should reset permissions",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page BrowserContext.overridePermissions should trigger permission onchange",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page ExecutionContext.queryObjects should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page ExecutionContext.queryObjects should work for non-trivial page",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.addScriptTag should throw when added with content to the CSP page",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.addScriptTag should throw when added with content to the CSP page",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.client should return the client instance",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.close should not be visible in browser.pages",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.close should run beforeunload if asked for",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.close should run beforeunload if asked for",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.close should terminate network waiters",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Close should work with window.close",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should have location and stack trace for console API calls",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should have location and stack trace for console API calls",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should have location when fetch fails",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should not fail for window object",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should trigger correct Log",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should work for different console API calls with logging functions",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Console should work for different console API calls with timing functions",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.error should throw when page crashes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Popup should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Popup should work with clicking target=_blank and rel=noopener",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Popup should work with clicking target=_blank and with rel=opener",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Popup should work with clicking target=_blank and without rel=opener",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Popup should work with fake-clicking target=_blank and rel=noopener",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.Events.Popup should work with noopener",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction should await returned promise",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction should be callable from-inside evaluateOnNewDocument",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL", "TIMEOUT"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction should be callable from-inside evaluateOnNewDocument",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction should fallback to default export when passed a module object",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction should not throw when frames detach",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction should support throwing \"null\"",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction should survive navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction should throw exception in page context",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction should work on frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction should work on frames before navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.exposeFunction should work with complex objects",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.metrics metrics event fired on console.timeStamp",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.metrics should get metrics from a page",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.removeExposedFunction should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should not throw when select causes navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.select should work when re-defining top-level Event class",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setBypassCSP should bypass after cross-process navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setBypassCSP should bypass CSP header",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setBypassCSP should bypass CSP in iframes as well",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setBypassCSP should bypass CSP meta tag",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setCacheEnabled should enable or disable the cache based on the state passed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setCacheEnabled should stay disabled when toggling request interception on/off",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setContent should respect default navigation timeout",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setGeolocation should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setJavaScriptEnabled should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setJavaScriptEnabled should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setOfflineMode should emulate navigator.onLine",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setOfflineMode should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.setUserAgent should work with additional userAgentMetdata",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.title should return the page title",
    "platforms": ["linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.waitForNetworkIdle should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[page.spec] Page Page.waitForNetworkIdle should work with aborted requests",
    "platforms": ["linux"],
    "parameters": ["firefox", "headful"],
    "expectations": ["PASS", "TIMEOUT"]
  },
  {
    "testIdPattern": "[prerender.spec] Prerender can navigate to a prerendered page via input",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[prerender.spec] Prerender via frame can navigate to a prerendered page via input",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[prerender.spec] Prerender with emulation can configure viewport for prerendered pages",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[prerender.spec] Prerender with network requests can receive requests from the prerendered page",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[proxy.spec] request proxy in incognito browser context should proxy requests when configured at browser level",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[proxy.spec] request proxy in incognito browser context should proxy requests when configured at context level",
    "platforms": ["win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[proxy.spec] request proxy in incognito browser context should proxy requests when configured at context level",
    "platforms": ["linux"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[proxy.spec] request proxy in incognito browser context should respect proxy bypass list when configured at browser level",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[proxy.spec] request proxy in incognito browser context should respect proxy bypass list when configured at context level",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[proxy.spec] request proxy should proxy requests when configured",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[proxy.spec] request proxy should respect proxy bypass list",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[proxy.spec] request proxy should respect proxy bypass list",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[queryhandler.spec] Query handler tests P selectors should work ARIA selectors",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[queryhandler.spec] Query handler tests P selectors should work ARIA selectors with name and role",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[queryhandler.spec] Query handler tests P selectors should work ARIA selectors with role",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[queryhandler.spec] Query handler tests P selectors should work for ARIA selectors in multiple isolated worlds",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "TIMEOUT"]
  },
  {
    "testIdPattern": "[requestinterception-experimental.spec] request interception \"after each\" hook in \"request interception\"",
    "platforms": ["win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[requestinterception-experimental.spec] request interception Page.setRequestInterception should load fonts if cache enabled",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["PASS", "TIMEOUT"]
  },
  {
    "testIdPattern": "[requestinterception-experimental.spec] request interception Page.setRequestInterception should navigate to URL with hash and fire requests without hash",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[requestinterception-experimental.spec] request interception Page.setRequestInterception should work with redirects",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[requestinterception.spec] request interception Page.setRequestInterception should navigate to URL with hash and fire requests without hash",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots ElementHandle.screenshot should capture full element when larger than viewport",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots ElementHandle.screenshot should work for an element with an offset",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots ElementHandle.screenshot should work with a rotated element",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should allow transparency",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should clip rect",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should get screenshot bigger than the viewport",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should render white background on jpeg file",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should return base64",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should return base64",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should take fullPage screenshots",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should use scale for clip",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should work",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should work with webp",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[stacktrace.spec] Stack trace should work for none error objects",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target Browser.targets should return all of the targets",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target Browser.waitForTarget should wait for a target",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target Browser.waitForTarget should wait for a target",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[target.spec] Target should be able to use async waitForTarget",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target should contain browser target",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target should create a worker from a service worker",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[target.spec] Target should create a worker from a shared worker",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[target.spec] Target should have an opener",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[target.spec] Target should not crash while redirecting if original request was missed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[target.spec] Target should not crash while redirecting if original request was missed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target should not report uninitialized pages",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target should report when a new page is created and closed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[target.spec] Target should report when a new page is created and closed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[target.spec] Target should report when a service worker is created and destroyed",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[target.spec] Target should report when a target url changes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[target.spec] Target should report when a target url changes",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[touchscreen.spec] Touchscreen should report touches",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[touchscreen.spec] Touchscreen should report touchMove",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[touchscreen.spec] Touchscreen should tap the button",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[tracing.spec] Tracing should throw if tracing on two pages",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForFunction should survive cross-process navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForFunction should survive cross-process navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForFunction should survive navigations",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForFunction should work when resolved right before execution context disposal",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForFunction should work when resolved right before execution context disposal",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForFunction should work with strict CSP policy",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForFunction should work with strict CSP policy",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForSelector Page.waitForSelector is shortcut for main frame",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForSelector Page.waitForSelector is shortcut for main frame",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForSelector should run in specified frame",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForSelector should run in specified frame",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForSelector should survive cross-process navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForSelector should survive cross-process navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForSelector should survive cross-process navigation",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["FAIL", "TIMEOUT"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForSelector should throw when frame is detached",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForSelector should throw when frame is detached",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForSelector should work with removed MutationObserver",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForXPath should run in specified frame",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForXPath should run in specified frame",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForXPath should throw when frame is detached",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["chrome", "webDriverBiDi"],
    "expectations": ["PASS", "TIMEOUT"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForXPath should throw when frame is detached",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[waittask.spec] waittask specs Frame.waitForXPath should throw when frame is detached",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "firefox"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[worker.spec] Workers should report errors",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[CDPSession.spec] Target.createCDPSession should send events",
    "platforms": ["win32"],
    "parameters": ["cdp", "chrome", "new-headless"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[headful.spec] headful tests HEADFUL OOPIF: should expose events within OOPIFs",
    "platforms": ["linux"],
    "parameters": ["cdp", "chrome", "headless"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[headful.spec] headful tests HEADFUL target.page() should return a DevTools page if custom isPageTarget is provided",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "headful", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[navigation.spec] navigation \"after all\" hook in \"navigation\"",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "headless", "webDriverBiDi"],
    "expectations": ["FAIL"]
  },
  {
    "testIdPattern": "[network.spec] network \"after each\" hook for \"Same-origin set-cookie subresource\"",
    "platforms": ["win32"],
    "parameters": ["cdp", "chrome", "new-headless"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network \"after each\" hook for \"Same-origin set-cookie subresource\"",
    "platforms": ["win32"],
    "parameters": ["cdp", "chrome", "new-headless"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network Network Events Page.Events.Request",
    "platforms": ["linux"],
    "parameters": ["cdp", "chrome", "new-headless"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[network.spec] network raw network headers Same-origin set-cookie subresource",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome", "headful"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[oopif.spec] OOPIF-debug OOPIF should support lazy OOP frames",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "headless", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[prerender.spec] Prerender can navigate to a prerendered page via Puppeteer",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "headless", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[prerender.spec] Prerender via frame can navigate to a prerendered page via Puppeteer",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["firefox", "headless", "webDriverBiDi"],
    "expectations": ["PASS"]
  },
  {
    "testIdPattern": "[requestinterception.spec] request interception Page.setRequestInterception should be abortable",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome", "headful"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[requestinterception.spec] request interception Page.setRequestInterception should work with redirects",
    "platforms": ["win32"],
    "parameters": ["cdp", "chrome", "new-headless"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[requestinterception.spec] request interception Page.setRequestInterception should work with redirects",
    "platforms": ["win32"],
    "parameters": ["cdp", "chrome", "headful"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should return base64",
    "platforms": ["linux"],
    "parameters": ["cdp", "chrome", "new-headless"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should work",
    "platforms": ["linux"],
    "parameters": ["cdp", "chrome", "new-headless"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should work in \"fromSurface: false\" mode",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome", "headless"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[screenshot.spec] Screenshots Page.screenshot should work in \"fromSurface: false\" mode",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome", "new-headless"],
    "expectations": ["SKIP"]
  },
  {
    "testIdPattern": "[worker.spec] Workers Page.workers",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome", "headless"],
    "expectations": ["FAIL", "PASS"]
  },
  {
    "testIdPattern": "[coverage.spec] Coverage specs JSCoverage resetOnNavigation should report scripts across navigations when disabled",
    "platforms": ["darwin", "linux", "win32"],
    "parameters": ["cdp", "chrome", "new-headless", "tabTarget"],
    "expectations": ["FAIL"]
  }
]
